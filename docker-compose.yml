# Docker Compose configuration for Shopping Cart Service with complete observability stack
# Includes Prometheus, Grafana, and SigNoz for comprehensive monitoring

version: '3.8'

services:
  # Shopping Cart Service
  cart-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        VERSION: "1.0.0"
        BUILD_TIME: "${BUILD_TIME:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}"
        GIT_COMMIT: "${GIT_COMMIT:-unknown}"
    container_name: shopping-cart-service
    ports:
      - "8080:8080"
    environment:
      - OTEL_SERVICE_NAME=shopping-cart-service
      - OTEL_SERVICE_VERSION=1.0.0
      - OTEL_SERVICE_INSTANCE_ID=docker-instance-1
      - OTEL_RESOURCE_ATTRIBUTES=environment=docker,region=local
    networks:
      - monitoring
    depends_on:
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8080"
      - "prometheus.io/path=/metrics"

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.0.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - monitoring
    depends_on:
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AlertManager for alerting
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Load Generator for testing
  load-generator:
    image: alpine:3.18
    container_name: load-generator
    networks:
      - monitoring
    depends_on:
      - cart-service
    command: >
      sh -c "
        apk add --no-cache curl &&
        while true; do
          # Health checks
          curl -s http://cart-service:8080/health > /dev/null || echo 'Health check failed'
          
          # Add items to cart
          curl -s -X POST http://cart-service:8080/cart/add \
            -H 'Content-Type: application/json' \
            -d '{\"user_id\":\"load_user_$$RANDOM\",\"item\":{\"id\":\"item_$$RANDOM\",\"name\":\"Load Test Item\",\"price\":19.99,\"quantity\":1}}' > /dev/null
          
          # Get cart occasionally
          if [ $$(($$RANDOM % 5)) -eq 0 ]; then
            curl -s 'http://cart-service:8080/cart/get?user_id=load_user_123' > /dev/null
          fi
          
          # Simulate errors occasionally
          if [ $$(($$RANDOM % 10)) -eq 0 ]; then
            curl -s http://cart-service:8080/simulate-error > /dev/null || true
          fi
          
          sleep $$(($$RANDOM % 3 + 1))
        done
      "
    restart: unless-stopped

  # Redis for advanced caching (optional)
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger for distributed tracing (future enhancement)
  jaeger:
    image: jaegertracing/all-in-one:1.47
    container_name: jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - monitoring
    restart: unless-stopped

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  redis_data:
    driver: local

networks:
  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16